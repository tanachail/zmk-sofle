#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <175>;
};

&lt { tapping-term-ms = <175>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos { compatible = "zmk,combos"; };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 57 56 55 54 53>;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57 59 60 61 63 62>;
    };

    ltthumb: ltthumb {
        compatible = "zmk,behavior-hold-tap";
        label = "LTTHUMB";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
    };

    dvorak_equal: dvorak_equal {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_EQUAL";
        bindings = <&kp PIPE>, <&kp GRAVE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_grave: dvorak_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_GRAVE";
        bindings = <&kp DLLR>, <&kp TILDE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_dash: dvorak_dash {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_DASH";
        bindings = <&kp EXCL>, <&kp PRCNT>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_backslash: dvorak_backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_BACKSLASH";
        bindings = <&kp NON_US_BACKSLASH>, <&kp HASH>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_closebrace: dvorak_closebrace {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_CLOSEBRACE";
        bindings = <&kp AT>, <&kp CARET>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_1: dvorak_1 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_1";
        bindings = <&kp PLUS>, <&kp NUMBER_1>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_2: dvorak_2 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_2";
        bindings = <&kp LEFT_BRACKET>, <&kp NUMBER_2>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_3: dvorak_3 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_3";
        bindings = <&kp LBRC>, <&kp NUMBER_3>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_4: dvorak_4 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_4";
        bindings = <&kp LPAR>, <&kp NUMBER_4>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_5: dvorak_5 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_5";
        bindings = <&kp AMPS>, <&kp N5>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_6: dvorak_6 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_6";
        bindings = <&kp EQUAL>, <&kp NUMBER_6>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_7: dvorak_7 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_7";
        bindings = <&kp RPAR>, <&kp N7>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_8: dvorak_8 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_8";
        bindings = <&kp RBRC>, <&kp N8>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_9: dvorak_9 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_9";
        bindings = <&kp RIGHT_BRACKET>, <&kp N9>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dvorak_0: dvorak_0 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVORAK_0";
        bindings = <&kp STAR>, <&kp N0>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp EQUAL                        &kp N1           &kp N2           &kp N3               &kp N4             &kp N5           &kp UP_ARROW     &kp N6   &kp N7              &kp N8               &kp N9           &kp N0              &kp MINUS
&kp GRAVE                        &kp Q            &kp W            &kp E                &kp R              &kp T            &kp DOWN_ARROW   &kp Y    &kp U               &kp I                &kp O            &kp P               &kp BACKSLASH
&kp ESCAPE                       &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G            &kp LEFT_ARROW   &kp H    &hmr RIGHT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_WIN SEMI  &kp APOS
&hml RIGHT_CONTROL LEFT_BRACKET  &kp Z            &kp X            &kp C                &kp V              &kp B            &kp RIGHT_ARROW  &kp N    &kp M               &kp COMMA            &kp DOT          &kp SLASH           &kp RIGHT_BRACKET
&kp C_MUTE                       &trans           &kp LEFT_WIN     &kp CAPS             &ltthumb 2 SPACE   &kp BACKSPACE    &kp ENTER        &kp TAB  &ltthumb 3 RET      &kp DELETE           &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "BASE";
        };

        dvorak {
            display-name = "DVORAK";
            bindings = <
&dvorak_equal             &dvorak_1        &dvorak_2        &dvorak_3            &dvorak_4          &dvorak_5    &kp UP_ARROW     &dvorak_6  &dvorak_7           &dvorak_8            &dvorak_9        &dvorak_0        &dvorak_dash
&dvorak_grave             &kp SEMICOLON    &kp COMMA        &kp PERIOD           &kp P              &kp Y        &kp DOWN_ARROW   &kp F      &kp G               &kp C                &kp R            &kp L            &dvorak_backslash
&kp ESCAPE                &hml LEFT_GUI A  &hml LEFT_ALT O  &hml LEFT_CONTROL E  &hml LEFT_SHIFT U  &kp I        &kp LEFT_ARROW   &kp D      &hmr RIGHT_SHIFT H  &hmr LEFT_CONTROL T  &hmr LEFT_ALT N  &hmr LEFT_GUI S  &kp MINUS
&hml RIGHT_CONTROL SLASH  &kp SQT          &kp Q            &kp J                &kp K              &kp X        &kp RIGHT_ARROW  &kp B      &kp M               &kp W                &kp V            &kp Z            &dvorak_closebrace
&kp C_MUTE                &trans           &trans           &trans               &trans             &trans       &kp ENTER        &trans     &trans              &trans               &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer2 {
            display-name = "NAV&Fn";
            bindings = <
&kp KP_NUMLOCK  &kp F1  &kp F2    &kp F3          &kp F4     &kp F5           &mmv MOVE_UP     &kp F6           &kp F7           &kp F8           &kp F9           &kp F10       &kp F11
&trans          &trans  &kp HOME  &kp UP_ARROW    &kp END    &kp PG_UP        &mmv MOVE_DOWN   &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &kp F12
&trans          &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp PAGE_DOWN    &mmv MOVE_LEFT   &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp BACKSPACE
&trans          &trans  &trans    &trans          &trans     &trans           &mmv MOVE_RIGHT  &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &kp ENTER
&kp C_MUTE      &trans  &trans    &trans          &trans     &trans           &mkp LCLK        &trans           &kp KP_NUMBER_0  &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer3 {
            label = "CON";
            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_VOL_UP     &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans          &mmv MOVE_DOWN   &trans           &rgb_ug RGB_SPD    &rgb_ug RGB_SPI  &trans  &trans  &trans
&trans          &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans          &mmv MOVE_LEFT   &trans           &rgb_ug RGB_BRD    &rgb_ug RGB_BRI  &trans  &trans  &trans
&trans          &sys_reset    &trans        &bootloader   &none         &trans          &mmv MOVE_RIGHT  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR    &rgb_ug RGB_EFF  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &tog 1        &to 4           &mkp LCLK        &trans           &trans             &trans           &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        game {
            label = "Game";
            bindings = <
&kp ESCAPE        &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans     &trans          &to 0
&kp TAB           &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans     &trans          &trans
&kp LEFT_SHIFT    &kp A   &kp S   &kp D      &kp F      &trans    &trans  &trans  &kp J   &kp K   &kp L      &kp UP_ARROW    &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &kp ENTER  &kp DOWN        &kp RIGHT
&trans            &trans  &trans  &kp ENTER  &kp SPACE  &trans    &trans  &trans  &kp N   &trans  &trans     &kp LEFT_ARROW
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
